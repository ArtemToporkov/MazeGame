class Player {

	static Grid grid;
	static Point start;
	field int i, j, x, y, playerSize, cellSize;

	constructor Player new(Point newStart, int newCellSize, Grid newGrid) {

		let start = newStart;
		let grid = newGrid;
		let cellSize = newCellSize;
		let playerSize = 8 * cellSize / 10;

		let x = (playerSize / 8) + start.x();
		let y = (playerSize / 8) + start.y();

		let i = 0;
		let j = 0;

		return this;
	}

	method void dispose() {

		do grid.dispose();
		do start.dispose();
		do Memory.deAlloc(this);

		return;
	}

	method int i() {
		return i;
	}

	method int j() {
		return j;
	}

	method void drawOrErase(boolean color) {
		var int centerX;
		var int centerY;
		let centerX = x + x + playerSize / 2;
		let centerY = y + y + playerSize / 2;
		do Screen.setColor(color);
		do Screen.drawCircle(centerX, centerY, playerSize / 2);
		do Screen.setColor(false);
		do Screen.drawCircle(x + centerX / 2, y + centerY / 2, 2);
		do Screen.drawCircle(x + centerX / 2 + (playerSize / 2), y + centerY / 2, 2);
		do Screen.setColor(color);
		do Screen.drawCircle(x + centerX / 2, y + centerY / 2, 1);
		do Screen.drawCircle(x + centerX / 2 + (playerSize / 2), y + centerY / 2, 1);
		do Screen.setColor(false);
		do Screen.drawRectangle(centerX - 2, centerY + 1, centerX + 2, centerY + 2);
		do Screen.setColor(color);
		return;
	}

	method void draw() {
		do drawOrErase(true);
		return;
	}

	method void erase() {
		do drawOrErase(false);
		return;
	}

	method void move(int key) {
		var Array cells;
		let cells = grid.cells();

		do erase();

		if (key = 130) { 
			do left(cells);
		}

		if (key = 131) {
			do up(cells);
		}

		if (key = 132) {
			do right(cells);
		}

		if (key = 133) {
			do down(cells);
		}

		do draw();

		return;
	}

	method void up(Array cells) {
		var Cell cellToCheck;
		if (grid.isValidPosition(j - 1, i)) {
			let cellToCheck = cells[((j - 1) * grid.cols()) + i];
			if (~(cellToCheck.hasBottom())) {
				let y = y - cellSize;
				let j = j - 1;
			}
		}
		return;
	}

	method void down(Array cells) {
		var Cell cellToCheck;
		if (grid.isValidPosition(j + 1, i)) {
			let cellToCheck = cells[(j * grid.cols()) + i];
			if (~(cellToCheck.hasBottom())) {
				let y = y + cellSize;
				let j = j + 1;
			}
		}
		return;
	}

	method void left(Array cells) {
		var Cell cellToCheck;
		if (grid.isValidPosition(j, i - 1)) {
			let cellToCheck = cells[(j * grid.cols()) + (i - 1)];
			if (~(cellToCheck.hasRight())) {
				let x = x - cellSize;
				let i = i - 1;
			}
		}
		return;
	}

	method void right(Array cells) {
		var Cell cellToCheck;
		if (grid.isValidPosition(j, i + 1)) {
			let cellToCheck = cells[(j * grid.cols()) + i];
			if (~(cellToCheck.hasRight())) {
				let x = x + cellSize;
				let i = i + 1;
			}
		}
		return;
	}
}