class Level {
    
    field String levelName;
    field Grid grid;
    field Array cells;
    field Player player;
    field Point start;
    field int lastCellIndex;
    field int mazePattern;


    constructor Level new(String _levelName, int _mazePattern) {
        let start = Point.new(12, 50);
        let grid = Grid.new(24, start);
        let player = Player.new(start, 24, grid);
        let lastCellIndex = (grid.rows() * grid.cols()) - 1;
        let levelName = _levelName;
        let mazePattern = _mazePattern;
        let cells = grid.cells();
        return this;
    }

    method void dispose() {
        do grid.dispose();
        do player.dispose();
        do start.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void initialize() {
        do player.draw();
        do printLevelName();
        if (mazePattern = 1){
            do drawMazeFirstPattern();
        } else {
            do drawMazeSecondPattern();
        }
        return;
    }

    method void printLevelName() {
        do Output.moveCursor(2, (64 - levelName.length()) / 2 - 1);
        do Output.printString(levelName);
        do levelName.dispose();
        return;
    }

    method void drawMazeFirstPattern() {
        do deleteRight(0);
        do deleteRight(1);
        do deleteBottom(2);
        do deleteRight(3);
        do deleteBottom(4);
        do deleteRight(4);
        do deleteRightMany(5, 8);
        do deleteBottom(8);
        do deleteBottom(9);
        do deleteBottom(10);
        do deleteRightMany(10, 13);
        do deleteBottom(13);
        do deleteBottom(14);
        do deleteRight(14);
        do deleteBottom(15);
        do deleteBottom(16);
        do deleteRightMany(16, 19);
        do deleteBottom(18);
        do deleteRightAndBottom(20);
        do deleteRight(22);
        do deleteRightAndBottom(23);
        do deleteBottom(24);
        do deleteRightAndBottom(25);
        do deleteRight(26);
        do deleteBottom(27);
        do deleteBottom(28);
        do deleteRight(29);
        do deleteBottomMany(30, 33);
        do deleteBottom(34);
        do deleteRight(35);
        do deleteBottomMany(37, 40);
        do deleteBottomMany(40, 42);
        do deleteRightMany(41, 43);
        do deleteBottomMany(44, 47);
        do deleteRight(48);
        do deleteBottom(49);
        do deleteRight(50);
        do deleteBottom(51);
        do deleteRight(52);
        do deleteBottom(53);
        do deleteRight(54);
        do deleteRightAndBottom(55);
        do deleteRightAndBottom(56);
        do deleteBottomMany(57, 60);
        do deleteBottom(60);
        do deleteRightMany(61, 62);
        do deleteRight(63);
        do deleteBottom(62);
        do deleteBottom(65);
        do deleteRightMany(66, 68);
        do deleteBottom(68);
        do deleteRight(69);
        do deleteBottomMany(70, 75);
        do deleteBottom(76);
        do deleteBottomMany(78, 80);
        do deleteRightAndBottom(80);
        do deleteRightAndBottom(82);
        do deleteRightAndBottom(84);
        do deleteBottom(86);
        do deleteRightMany(86, 89);
        do deleteBottom(89);
        do deleteBottom(90);
        do deleteRight(91);
        do deleteBottom(92);
        do deleteRightMany(93, 95);
        do deleteBottom(94);
        do deleteRight(95);
        do deleteBottom(96);
        do deleteRightMany(97, 99);
        do deleteBottom(98);
        do deleteRightAndBottom(100);
        do deleteBottom(101);
        do deleteRightMany(102, 104);
        do deleteRight(105);
        do deleteRight(107);
        do deleteBottomMany(106, 109);
        do deleteRight(110);
        do deleteBottom(111);
        do deleteRight(112);
        do deleteBottomMany(113, 116);
        do deleteRight(116);
        do deleteBottom(117);
        do deleteRight(118);
        do deleteBottom(119);
        do deleteBottomMany(120, 124);
        do deleteRightMany(122, 126);
        do deleteBottomMany(128, 130);
        do deleteRightMany(129, 131);
        do deleteRight(132);
        do deleteBottom(134);
        do deleteRight(135);
        do deleteBottom(136);
        do deleteRight(137);
        do deleteBottom(138);
        do deleteBottom(139);
        do deleteRight(141);
        do deleteRightMany(143, 147);
        do deleteRightMany(148, 154);
        do deleteRightMany(155, 158);
        do deleteRight(159);

        do grid.draw();
        return;
    }
    
    method void drawMazeSecondPattern() {
        do deleteRight(0);
        do deleteRight(1);
        do deleteBottom(2);
        do deleteRight(3);
        do deleteBottom(4);
        do deleteRight(4);
        do deleteRightMany(5, 8);
        do deleteBottom(8);
        do deleteBottom(9);
        do deleteBottom(10);
        do deleteRightMany(10, 13);
        do deleteBottom(13);
        do deleteBottom(14);
        do deleteRight(14);
        do deleteBottom(15);
        do deleteBottom(16);
        do deleteRightMany(16, 19);
        do deleteBottom(18);
        do deleteRightAndBottom(20);
        do deleteRight(22);
        do deleteRightAndBottom(23);
        do deleteBottom(24);
        do deleteRightAndBottom(25);
        do deleteRight(26);
        do deleteBottom(27);
        do deleteBottom(28);
        do deleteRight(29);
        do deleteBottomMany(30, 33);
        do deleteBottom(34);
        do deleteRight(35);
        do deleteBottomMany(37, 40);
        do deleteBottomMany(40, 42);
        do deleteRightMany(41, 43);
        do deleteBottomMany(44, 47);
        do deleteRight(48);
        do deleteBottom(49);
        do deleteRight(50);
        do deleteBottom(51);
        do deleteRight(52);
        do deleteBottom(53);
        do deleteRight(54);
        do deleteRightAndBottom(55);
        do deleteRightAndBottom(56);
        do deleteBottomMany(57, 60);
        do deleteBottom(60);
        do deleteRightMany(61, 62);
        do deleteRight(63);
        do deleteBottom(62);
        do deleteBottom(65);
        do deleteRightMany(66, 68);
        do deleteBottom(68);
        do deleteRight(69);
        do deleteBottomMany(70, 75);
        do deleteBottom(76);
        do deleteBottomMany(78, 80);
        do deleteRightAndBottom(80);
        do deleteRightAndBottom(82);
        do deleteRightAndBottom(84);
        do deleteBottom(86);
        do deleteRightMany(86, 89);
        do deleteBottom(89);
        do deleteBottom(90);
        do deleteRight(91);
        do deleteBottom(92);
        do deleteRightMany(93, 95);
        do deleteBottom(94);
        do deleteRight(95);
        do deleteBottom(96);
        do deleteRightMany(97, 99);
        do deleteBottom(98);
        do deleteRightAndBottom(100);
        do deleteBottom(101);
        do deleteRightMany(102, 104);
        do deleteRight(105);
        do deleteRight(107);
        do deleteBottomMany(106, 109);
        do deleteRight(110);
        do deleteBottom(111);
        do deleteRight(112);
        do deleteBottomMany(113, 116);
        do deleteRight(116);
        do deleteBottom(117);
        do deleteRight(118);
        do deleteBottom(119);
        do deleteBottomMany(120, 124);
        do deleteRightMany(122, 126);
        do deleteBottomMany(128, 130);
        do deleteRightMany(129, 131);
        do deleteRight(132);
        do deleteBottom(134);
        do deleteRight(135);
        do deleteBottom(136);
        do deleteRight(137);
        do deleteBottom(138);
        do deleteBottom(139);
        do deleteRight(141);
        do deleteRightMany(143, 147);
        do deleteRightMany(148, 154);
        do deleteRightMany(155, 158);
        do deleteRight(159);

        do grid.draw();
        do Screen.drawRectangle(0, 50, 511, 255);
        return;
    }

    method void deleteRight(int cellIndex) {
        var Cell cell;
        let cell = cells[cellIndex];
        do cell.deleteRight();
        return;
    } 

    method void deleteBottom(int cellIndex) {
        var Cell cell;
        let cell = cells[cellIndex];
        do cell.deleteBottom();
        return;
    } 

    method void deleteRightAndBottom(int cellIndex) {
        var Cell cell;
        let cell = cells[cellIndex];
        do cell.deleteBottom();
        do cell.deleteRight();
        return;
    }

    method void deleteRightMany(int startCell, int endCell) {
        var Cell cell;
        while (startCell < endCell) {
            let cell = cells[startCell];
            do cell.deleteRight();
            let startCell = startCell + 1;
        }

        return;
    }

    method void deleteBottomMany(int startCell, int endCell) {
        var Cell cell;
        while (startCell < endCell) {
            let cell = cells[startCell];
            do cell.deleteBottom();
            let startCell = startCell + 1;
        }

        return;
    }

    method boolean hasEnded() {
        var Point currentCellIndex;
		let currentCellIndex = (player.j() * grid.cols()) + player.i();
		return (lastCellIndex = currentCellIndex);
	}

    method Player player() {
        return player;
    }

    method void run() {

        var int key;
        var boolean hasFinished;
        let hasFinished = false;

        do initialize();

        while (~(hasFinished)) {
            let key = Keyboard.keyPressed();
            if (key > 0) {
                do player.move(key);
                let hasFinished = hasEnded();
                do Sys.wait(200);
            }
        }

        do dispose();
        do Screen.clearScreen();

        return;
    }
}