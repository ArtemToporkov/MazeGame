class Level {
    
    field String levelName;
    field Grid grid;
    field Player player;
    field Point start;
    field int lastCellIndex;


    constructor Level new(String _levelName) {
        let start = Point.new(12, 50);
        let grid = Grid.new(24, start);
        let player = Player.new(start, 24, grid);
        let lastCellIndex = (grid.rows() * grid.cols()) - 1;
        let levelName = _levelName;
        return this;
    }

    method void dispose() {
        do grid.dispose();
        do player.dispose();
        do start.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void initialize() {
        do player.draw();
        do printLevelName();
        do makeGrid();
        return;
    }

    method void printLevelName() {
        do Output.moveCursor(2, 15);
        do Output.printString(levelName);
        do levelName.dispose();
        return;
    }

    method void makeGrid() {
        var Array cells;
        var Cell cell;
        var int k;

        let cells = grid.cells();

        let cell = cells[0];
        do cell.deleteBottom();

        let cell = cells[1];
        do cell.deleteBottom();

        let cell = cells[2];
        do cell.deleteRight();

        let cell = cells[20];
        do cell.deleteBottom();

        let cell = cells[40];
        do cell.deleteBottom();

        let cell = cells[60];
        do cell.deleteBottom();

        let cell = cells[80];
        do cell.deleteBottom();

        let cell = cells[100];
        do cell.deleteBottom();

        let cell = cells[120];
        do cell.deleteBottom();

        let k = 120;
        while (k < 139) {
            let cell = cells[k];
            do cell.deleteRight();
            let k = 
            k + 1;
        }

        let cell = cells[139];
        do cell.deleteBottom();
        do grid.draw();
        return;
    }

    method boolean hasEnded() {
        var Point currentCellIndex;
		let currentCellIndex = (player.j() * grid.cols()) + player.i();
		return (lastCellIndex = currentCellIndex);
	}

    method Player player() {
        return player;
    }

    method void run() {

        var int key;
        var boolean hasFinished;
        let hasFinished = false;

        do initialize();

        while (~(hasFinished)) {
            let key = Keyboard.keyPressed();
            if (key > 0) {
                do player.move(key);
                let hasFinished = hasEnded();
                do Sys.wait(200);
            }
        }

        do dispose();
        do Screen.clearScreen();

        return;
    }
}